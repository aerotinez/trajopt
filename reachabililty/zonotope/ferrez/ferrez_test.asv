close("all"); clear; clc;

rng(10);
G = rand(3,3);
n = size(G,1);
m = size(G,2);

fP = @(g)plane3d(g,center(G));
P = cellfun(fP,num2cell(G,1),"uniform",0);

f = @(Pk)partitionSphere(P{1},mapToPlane(Pk,circle()));
p = cell2mat(cellfun(f,P(2:end),"uniform",0));
R = planeOrientation(P{1});
p2 = R.'*stereographicProjection(P{1},p);

fig = myFigure();
f = @(P,c)plotPlane(P,mcolor(c));
c = 'boypgcr';
cellfun(f,P,cellstr(c(1:m).').');
hold on;
scatter3(p(1,:),p(2,:),p(3,:),5,'k',"filled","LineWidth",2);
hold off;
plotFrame(R,center(G));

fig_2d = myFigure();
view(fig_2d.Children,2);
hold on;
scatter(p2(1,:),p2(2,:),5,'k',"filled","LineWidth",2);
hold off;
camproj orthographic

function fig = myFigure()
    fig = figure();
    axe = axes(fig);
    axis(axe,"equal");
    view(axe,3);
    box(axe,"on");
    camproj(axe,"perspective");
    xlabel(axe,"x (m)");
    ylabel(axe,"y (m)");
    zlabel(axe,"z (m)");
end

function c = center(G)
    arguments
        G (3,:) double;
    end
    c = sum(G,2)./2;
end

function P = plane3d(n,r0)
    arguments
        n (3,1) double;
        r0 (3,1) double;
    end
    if norm(n) ~= 1
        n = n./norm(n);
    end
    P = struct('n',n,'r0',r0);
end

function P = intersection(Pa,Pb)
    ha = dot(Pa.n,Pa.r0);
    hb = dot(Pb.n,Pb.r0);
    n = dot(Pa.n,Pb.n);
    ca = (ha - hb.*n)./(1 - n.^2);
    cb = (hb - hb.*n)./(1 - n.^2);
    P = struct('r0',ca.*Pa.n + cb.*Pb.n,'d',cross(Pa.n,Pb.n));
end

function C = circle(r)
    arguments
        r (1,1) double = 1;
    end
    s = linspace(-pi,pi,1000);
    C = r.*[
        cos(s);
        sin(s)
        ];
end

function pb = mapToPlane(P,pa)
    arguments
        P (1,1) struct;
        pa (2,:) double;
    end
    pb = [
        pa;
        -P.n(1:2).'*pa./P.n(3)
        ];
    pb = pb./vecnorm(pb,2,1) + P.r0;
end

function plotPlane(P,c)
    arguments
        P (1,1) struct;
        c (1,1) string = mcolor('b');
    end
    axe = gca;
    n = P.n;
    r = P.r0;
    p = mapToPlane(P,circle());
    hold(axe,"on");
    fill3(axe,p(1,:),p(2,:),p(3,:),'k', ...
        "LineWidth",2, ...
        "EdgeColor",c, ...
        "FaceColor",'w', ...
        "FaceAlpha",1);
    quiver3(axe,r(1),r(2),r(3),n(1),n(2),n(3), ...
        "Color",c, ...
        "AutoScale","off", ...
        "LineWidth",2, ...
        "MaxHeadSize",10);
    hold(axe,"off");
end

function P = offsetPlane(P0)
    arguments
        P0 (1,1) struct;
    end
    P = plane3d(-P0.n,P0.r0 + 2.5.*P0.n);
end

function p = partitionSphere(P,p0)
    arguments
        P (1,1) struct;
        p0 (3,:) double;
    end
    p = P.n.'*(p0 - P.r0);
    p = p0(:,p > 0);
end

function p = stereographicProjection(P,p0)
    arguments
        P (1,1) struct;
        p0 (3,:) double;
    end
    n = P.n;
    p0 = p0 - P.r0;
    p = (p0 - (n.'*p0).*n);
end

function R = planeOrientation(P)
    arguments
        P (1,1) struct;
    end
    f = @(x)x./norm(x);
    u = P.n;
    v = f(cross(u,u + [1;0;0]));
    w = f(cross(u,v));
    R = [v,w,u];
end

function plotAxis(n,p)
    axe = gca;
    hold(axe,"on");
    quiver3(axe,p(1),p(2),p(3),n(1),n(2),n(3), ...
        "MaxHeadSize",10, ...
        "AutoScale","off", ...
        "LineWidth",2, ...
        "Color",'k');
    hold(axe,"off");
end

function plotFrame(R,p)
    arguments
        R (3,3) double;
        p (3,1) double;
    end
    cellfun(@(n)plotAxis(n,p),num2cell(R,1));
end

function p = flattenSphereProjection(p0)
